<?xml version="1.0" encoding="utf-8" ?>
<Security>
  <Common>
    <Exception>
      <Cons0>
        <summary>Initializes a new exception.</summary>
      </Cons0>

      <Cons1>
        <summary>Initializes a new exception with the given message.</summary>
        <param name="message">A human-readable message that describes the error.</param>
      </Cons1>

      <Cons2>
        <summary>Initializes a new exception with the given message and inner exception.</summary>
        <param name="message">A human-readable message that describes the error.</param>
        <param name="innerException">The exception that is the cause of the current exception.</param>
      </Cons2>

      <ConsBF>
        <summary>Initializes a new operation failure exception with the given base message and failure reasons.</summary>
      </ConsBF>
      
      <ConsF>
        <summary>Initializes a new exception with the given failure reasons.</summary>
        <param name="reasons">A <see cref="FailureReason"/> value that indicates potential causes for the failure.</param>
      </ConsF>

      <ConsF2>
        <summary>Initializes a new exception with the given failure reasons, and some additional error text.</summary>
        <param name="reasons">A <see cref="FailureReason"/> value that indicates potential causes for the failure.</param>
        <param name="extraText">Additional text to include in the error message.</param>
      </ConsF2>
    </Exception>

    <ToString>Converts the object to a human-readable string.</ToString>
  </Common>
  
  <ReadOnlyClass>
    <MakeReadOnly>
      <summary>
        Validates and locks the property values of the object so that they cannot be changed. This method is
        intended to be called by the PGP interface before returning the object to the user.
      </summary>
    </MakeReadOnly>
  </ReadOnlyClass>

  <Key>
    <Keyring>
      <summary>
        Gets or sets the name of the keyring file that contains the key, or null if they key is from the default
        keyring.
      </summary>
    </Keyring>
  </Key>

  <PGPSystem>
    <KeyNotUpdatedImmediately>
      <remarks>The changes to the key will not be be visible until the key is refreshed by retrieving it again from
        the PGP system.
      </remarks>
    </KeyNotUpdatedImmediately>

    <AddDesignatedRevoker>
      <summary>
        Adds a designated revoker to the given primary key. A designated revoker is a second key whose owner has
        the power to revoke the first key. A designated revoker cannot be removed once it has been added.
      </summary>
      <param name="key">
        The key that can be revoked by the designated revoker. The secret portion of this key must be
        available.
      </param>
      <param name="revokerKey">The public key of the designated revoker.</param>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </AddDesignatedRevoker>

    <AddPhoto3>
      <summary>Adds the given image to the given key as a photo user id.</summary>
      <remarks>
        The default implementation simply saves the image as a JPEG and passes it to
        <see cref="AddPhoto(PrimaryKey,Stream,OpenPGPImageFormat,bool)"/>.
      </remarks>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </AddPhoto3>

    <AddPhoto4>
      <summary>Adds a photo in the given format to the given key.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </AddPhoto4>

    <AddUserId>
      <summary>Adds a new user ID to the given primary key.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </AddUserId>

    <AddSubkey>
      <summary>Adds a new subkey to the given primary key.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </AddSubkey>

    <ChangeExpiration>
      <summary>Changes the expiration time on a primary key or subkey.</summary>
      <param name="key">The key whose expiration time will be changed.</param>
      <param name="expiration">
        The new expiration time, or null if the key should not expire. The time must be in
        the future.
      </param>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </ChangeExpiration>

    <ChangePassword>
      <summary>Changes the password on a primary key.</summary>
    </ChangePassword>

    <CleanKeys>
      <summary>Cleans the given keys by removing unusable signatures and user IDs from them.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </CleanKeys>

    <CreateKey>
      <summary>Creates a new key pair.</summary>
    </CreateKey>

    <CreatePublicKeyring>
      <summary>Creates a new, empty public keyring in the given file.</summary>
      <remarks>The default implementation simply creates a zero-length file.</remarks>
    </CreatePublicKeyring>

    <CreateSecretKeyring>
      <summary>Creates a new, empty secret keyring in the given file.</summary>
      <remarks>The default implementation simply creates a zero-length file.</remarks>
    </CreateSecretKeyring>

    <CreateTrustDatabase>
      <summary>Creates a new, empty trust database in the given file.</summary>
      <remarks>The default implementation simply creates a zero-length file.</remarks>
    </CreateTrustDatabase>
    
    <Decrypt>
      <summary>
        Decrypts the given ciphertext and writes the result to the given destination. Signatures embedded
        in the ciphertext are also verified and returned.
      </summary>
    </Decrypt>

    <DeleteAttributes>
      <summary>Deletes the given attributes from their owning keys.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </DeleteAttributes>
    
    <DeleteKeys>
      <summary>Deletes the given primary keys, or a part of them, from their keyrings.</summary>
      <param name="keys">The primary keys to delete.</param>
      <param name="deletion">The portion of the keys to delete.</param>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </DeleteKeys>

    <DeleteSignatures>
      <summary>Deletes the given signatures from their owning attributes.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </DeleteSignatures>

    <DeleteSubkeys>
      <summary>Deletes the given subkeys from their owning keys.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </DeleteSubkeys>
    
    <DisableKeys>
      <summary>
        Disables the given primary keys. Disabling a key is a local operation that does not change the key for
        any other user.
      </summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </DisableKeys>

    <EnableKeys>
      <summary>
        Enables the given primary keys. Enabling a key is a local operation that does not change the key for
        any other user.
      </summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </EnableKeys>

    <Encrypt>
      <summary>Encrypts the given source data, writing the result to the given destination.</summary>
    </Encrypt>
    
    <ExportPublicKeys>
      <summary>Exports the given public keys to the given stream.</summary>
    </ExportPublicKeys>
    
    <ExportPublicKeys2>
      <summary>Exports all public keys in the given keyring files and/or the default keyring to the given stream.</summary>
      <param name="keyrings">
        Specifies a list of additional keyrings. If null or empty, no additional keyrings will be used.
      </param>
      <param name="includeDefaultKeyring">
        Specifies whether the default keyring will be implicitly included. If false,
        only the keyrings listed in <paramref name="keyrings"/> will be used.
      </param>
      <param name="destination">The stream to which the key data will be written.</param>
      <param name="exportOptions">Options controlling how the keys should be exported.</param>
      <param name="outputOptions">Options that control the output format.</param>
    </ExportPublicKeys2>
    
    <ExportSecretKeys>
      <summary>Exports the given secret and public keys to the given destination.</summary>
    </ExportSecretKeys>
    
    <ExportSecretKeys2>
      <summary>Exports all secret keys in the given keyring files and/or the default keyring to the given stream.</summary>
      <param name="keyrings">
        Specifies a list of additional keyrings. If null or empty, no additional keyrings will be used.
      </param>
      <param name="includeDefaultKeyring">
        Specifies whether the default keyring will be implicitly included. If false,
        only the keyrings listed in <paramref name="keyrings"/> will be used.
      </param>
      <param name="destination">The stream to which the key data will be written.</param>
      <param name="exportOptions">Options controlling how the keys should be exported.</param>
      <param name="outputOptions">Options that control the output format.</param>
    </ExportSecretKeys2>

    <FindPublicKeysOnServer>
      <summary>Searches for keys on the given key server.</summary>
      <param name="keyServer">The key server that will be searched for keys.</param>
      <param name="handler">
        A <see cref="KeySearchHandler"/> that controls the search and receives the search results.
      </param>
      <param name="searchKeywords">An array of keywords that will be passed to the key server.</param>
      <remarks>Many servers will return no results if the search is so general that too many results would be
        returned.
      </remarks>
    </FindPublicKeysOnServer>

    <FindPublicKey>
      <summary>Searches for the public key with the given fingerprint, ID, or keyword in the given keyring.</summary>
      <param name="keywordOrId">
        The fingerprint, ID, or keyword of the key to search for. Searching for fingerprints
        and key IDs works in an identical fashion across all PGP systems, but the exact level of support for keyword
        searching (ie, searching for names or email addresses) is not guaranteed.
      </param>
      <param name="keyring">The keyring to search, or null to search the default keyring.</param>
      <param name="options">Options controlling how keys should be returned.</param>
      <returns>Returns the key if it was found, or null if it was not.</returns>
    </FindPublicKey>

    <FindPublicKeys>
      <summary>Searches for the public keys with the given fingerprints or IDs in the given keyrings.</summary>
      <param name="fingerprintsOrIds">An array containing the fingerprints or IDs of the keys to search for. A PGP
        implementation may allow searching for other types of key identifiers, such as email addresses, but that is not
        guaranteed, unless you use <see cref="FindPublicKey(string,Keyring,ListOptions)"/>.
      </param>
      <param name="keyrings">An array of additional keyrings to search, or null to use no additional keyrings.</param>
      <param name="includeDefaultKeyring">If true, the default keyring will also be searched.</param>
      <param name="options">Options controlling how keys should be returned.</param>
      <returns>
        Returns an array of primary keys with the same length as the array of fingerprints. The key at index
        <c>i</c> will have a fingerprint equal to <c>fingerprintsOrIds[i]</c>, or will be null if no key with that
        fingerprint or ID could be found.
      </returns>
    </FindPublicKeys>

    <FindSecretKey>
      <summary>Searches for the secret key with the given fingerprint, ID, or keyword in the given keyring.</summary>
      <param name="keywordOrId">
        The fingerprint, ID, or keyword of the key to search for. Searching for fingerprints
        and key IDs works in an identical fashion across all PGP systems, but the exact level of support for keyword
        searching (ie, searching for names or email addresses) is not guaranteed.
      </param>
      <param name="keyring">The keyring to search, or null to search the default keyring.</param>
      <param name="options">Options controlling how keys should be returned.</param>
      <returns>Returns the key if it was found, or null if it was not.</returns>
    </FindSecretKey>

    <FindSecretKeys>
      <summary>Searches for the secret keys with the given fingerprints or IDs in the given keyrings.</summary>
      <param name="fingerprintsOrIds">
        An array containing the fingerprints or IDs of the keys to search for. A PGP
        implementation may allow searching for other types of key identifiers, such as email addresses, but that is not
        guaranteed, unless you use <see cref="FindSecretKey(string,Keyring,ListOptions)"/>.
      </param>
      <param name="keyrings">An array of additional keyrings to search, or null to use no additional keyrings.</param>
      <param name="includeDefaultKeyring">If true, the default keyring will also be searched.</param>
      <param name="options">Options controlling how keys should be returned.</param>
      <returns>
        Returns an array of primary keys with the same length as the array of fingerprints. The key at index
        <c>i</c> will have a fingerprint equal to <c>fingerprintsOrIds[i]</c>, or will be null if no key with that
        fingerprint or ID could be found.
      </returns>
    </FindSecretKeys>

    <GenerateRevocationCertificate>
      <summary>
        Generates a revocation certificate for the given primary key. The revocation certificate can be imported at a
        later time to revoke the key. You must have the secret key.
      </summary>
    </GenerateRevocationCertificate>

    <GenerateRevocationCertificateD>
      <summary>
        Generates a revocation certificate for the given key, using the given designated revoker key. You do not need
        the secret portion of the key to be revoked, but you need the secret portion of the designated revoker key and
        permission from the key to be revoked. The revocation certificate can be imported at a later time to revoke the
        key.
      </summary>
    </GenerateRevocationCertificateD>

    <GetPreferences>
      <summary>Returns the preferences for the given user id or attribute.</summary>
    </GetPreferences>
    
    <GetRandomData>
      <summary>Generates random data and writes it to the given buffer.</summary>
      <param name="quality">
        The level of randomness of the data. For most operations, this should be
        <see cref="Randomness.Strong"/>.
      </param>
      <param name="buffer">The array to which the random data will be written.</param>
      <param name="index">
        The index within <paramref name="buffer"/> where writing will begin.
      </param>
      <param name="count">The number of bytes to write.</param>
    </GetRandomData>

    <GetCardPin>
      <summary>Gets the PIN or password for a smartcard.</summary>
      <param name="cardType">A string containing the type of the card.</param>
      <param name="serialNumber">A string containing the serial number of the card, if it's known.</param>
    </GetCardPin>

    <GetDecryptionPassword>
      <summary>Gets the password for a document encrypted with a password, or when requesting a new password for a key
        that doesn't have one yet.
      </summary>
    </GetDecryptionPassword>
    
    <GetKeyPassword>
      <summary>Gets the password for the secret key named in the given password hint.</summary>
      <param name="keyId">The ID of the key whose password is sought.</param>
      <param name="passwordHint">A password hint to be displayed to the user, containing the user ID that owns the key
        and the key ID.
      </param>
      <returns>Returns a new <see cref="SecureString"/> containing the password.</returns>
      <remarks>The password will be disposed after being used.</remarks>
    </GetKeyPassword>

    <GetPublicKeys2>
      <summary>Gets all public keys in the default keyring and/or the list of keyring files.</summary>
      <param name="keyrings">
        Specifies a list of additional keyring. If null or empty, no additional keyrings will be used.
      </param>
      <param name="includeDefaultKeyring">
        Specifies whether the default keyring will be implicitly included. If false,
        only the keyrings listed in <paramref name="keyrings"/> will be used.
      </param>
      <param name="options">Options controlling how keys should be returned.</param>
    </GetPublicKeys2>
    
    <GetSecretKeys2>
      <summary>Gets all secret keys in the default keyring and/or the list of keyring files.</summary>
      <param name="keyrings">
        Specifies a list of additional keyring. If null or empty, no additional keyrings will be used.
      </param>
      <param name="includeDefaultKeyring">
        Specifies whether the default keyring will be implicitly included. If false,
        only the keyrings listed in <paramref name="keyrings"/> will be used.
      </param>
    </GetSecretKeys2>

    <GetSupportedCiphers>
      <summary>
        Gets a list of the cipher algorithms supported by the PGP system. You can use them case-insensitively to
        check whether a given algorithm is supported.
      </summary>
    </GetSupportedCiphers>

    <GetSupportedCompressions>
      <summary>
        Gets a list of the compression algorithms supported by the PGP system. You can use them
        case-insensitively to check whether a given algorithm is supported.
      </summary>
    </GetSupportedCompressions>

    <GetSupportedHashes>
      <summary>
        Gets a list of the hash algorithms supported by the PGP system. You can use them case-insensitively to
        check whether a given algorithm is supported.
      </summary>
    </GetSupportedHashes>

    <GetSupportedKeyTypes>
      <summary>
        Gets a list of the key types supported by the PGP system. You can use them case-insensitively to check
        whether a given key type is supported.
      </summary>
    </GetSupportedKeyTypes>
    
    <Hash>
      <summary>Generates a hash of the given data, using the given hash algorithm.</summary>
      <param name="hashAlgorithm">
        The name of the algorithm used to hash the data. This can be one of the
        <see cref="HashAlgorithm"/> values, or another algorithm name. If you don't particularly care which algorithm
        will be used, then it's usually best to use <see cref="HashAlgorithm.Default"/>. If you do want to use a specific
        algorithm, you should check that it is supported by checking <see cref="GetSupportedHashes"/>.
      </param>
      <param name="data">The stream from which the data to hash will be read.</param>
    </Hash>

    <ImportKeys2>
      <summary>Imports keys from the given source into the default keyring.</summary>
    </ImportKeys2>
    
    <ImportKeys3>
      <summary>Imports keys from the given source into the given keyring.</summary>
    </ImportKeys3>

    <ImportKeysFromServer>
      <summary>Downloads the public keys specified with the given fingerprints (or key IDs) from the given key server,
        and imports them into the given keyring.
      </summary>
    </ImportKeysFromServer>
    
    <MinimizeKeys>
      <summary>
        Minimizes the given keys by removing all signatures except the most recent self-signature, and removes
        unusable user IDs.
      </summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </MinimizeKeys>
    
    <OnInvalidPassword>
      <summary>
        Called when the password for the given key is invalid, to allow client applications to flush their
        password cache (if using one) and retry. Applications should not request a new password in response to this
        event.
      </summary>
      <param name="keyId">The key ID whose password was invalid.</param>
    </OnInvalidPassword>

    <RefreshKeyringFromServer>
      <summary>Refreshes all of the keys on the given keyring from a key server.</summary>
      <param name="options">
        Options that control the download, or null to use the default options. Note that using the
        default options will only succeed if all keys have preferred key servers set, which is probably not the case.
      </param>
      <param name="keyring">The keyring to refresh, or null to refresh the default keyring.</param>
    </RefreshKeyringFromServer>

    <RefreshKeysFromServer>
      <summary>Refreshes the given keys from a key server.</summary>
      <param name="options">
        Options that control the download, or null to use the default options. Note that using the
        default options will only succeed if all keys have preferred key servers set, which is probably not the case.
      </param>
      <param name="keys">The keys to refresh.</param>
    </RefreshKeysFromServer>
    
    <RevokeAttributes>
      <summary>Revokes the given attributes from their owning keys.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </RevokeAttributes>

    <RevokeKeys>
      <summary>
        Revokes the given primary keys if you have their secret keys. You will typically want to publish the revoked
        keys to a key server or otherwise distribute them afterwards so that other people will know the keys have been
        revoked.
      </summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </RevokeKeys>

    <RevokeKeysD>
      <summary>Revokes the given primary keys using the given designated revoker key. You do not need the secret keys
        of the keys to be revoked, but you must have the secret key of the designated revoker key, and permission from
        the keys to be revoked. You will typically want to publish the revoked keys to a key server or otherwise
        distribute them afterwards so that other people will know the keys have been revoked.
      </summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </RevokeKeysD>

    <RevokeSignatures>
      <summary>Revokes the given signatures from their owning attributes.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </RevokeSignatures>

    <RevokeSubkeys>
      <summary>Revokes the given subkeys from their owning keys.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </RevokeSubkeys>

    <SetOwnerTrust>
      <summary>
        Sets the owner trust level of the given keys, which indicates how much you trust the owner to rigorously
        validate the identities of the keys they sign.
      </summary>
    </SetOwnerTrust>

    <SetPreferences>
      <summary>Sets the preferences of the given user attribute.</summary>
      <remarks>
        Note that if the <see cref="UserPreferences.Primary"/> property is set to false, it won't cause any change in
        the <see cref="UserAttribute.Primary"/> property of the user attribute. To make an attribute non-primary, set
        another attribute as primary.
      </remarks>
    </SetPreferences>

    <Sign>
      <summary>Signs the given source data and writes the result to the given destination.</summary>
    </Sign>

    <SignAndEncrypt>
      <summary>Signs and/or encrypts the given source data and writes the result to the given destination.</summary>
      <param name="sourceData">The stream from which the unencrypted source data will be read.</param>
      <param name="destination">The stream to which the signed and/or encrypted data will be written.</param>
      <param name="signingOptions">Options that control the signing of the data, or null to only encrypt the data.</param>
      <param name="encryptionOptions">Options that control the encryption of the data, or null to only sign the data.</param>
      <param name="outputOptions">Options that control the output format.</param>
      <remarks>
        Only one of <paramref name="signingOptions"/> and <paramref name="encryptionOptions"/> can be null.
      </remarks>
    </SignAndEncrypt>

    <SignAttribute>
      <summary>Signs the given user ID or user attribute.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </SignAttribute>

    <SignAttributes>
      <summary>Signs the given user IDs or user attributes.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </SignAttributes>

    <SignKey>
      <summary>Signs the given key. This is equivalent to signing all user IDs on the key.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </SignKey>

    <SignKeys>
      <summary>Signs the given keys. This is equivalent to signing all user IDs on the keys.</summary>
      <include file="documentation.xml" path="/Security/PGPSystem/KeyNotUpdatedImmediately/*"/>
    </SignKeys>

    <UploadKeys>
      <summary>Uploads the given keys to a key server.</summary>
    </UploadKeys>

    <Verify2>
      <summary>Verifies embedded signatures in the given signed data. The signed data should not have been
        simultaneously encrypted. To verify signatures in encrypted, signed data, call
        <see cref="Decrypt(Stream,Stream,DecryptionOptions)"/> with a destination stream of <see cref="Stream.Null"/>.
      </summary>
    </Verify2>

    <Verify3>
      <summary>Verifies detached signatures for the given signed data.</summary>
    </Verify3>
  </PGPSystem>
</Security>